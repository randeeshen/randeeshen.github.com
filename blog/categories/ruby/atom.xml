<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Randee’s Octopress Blog]]></title>
  <link href="http://randeeshen.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://randeeshen.github.com/"/>
  <updated>2012-08-25T05:42:21+08:00</updated>
  <id>http://randeeshen.github.com/</id>
  <author>
    <name><![CDATA[Randee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby block的用途和理解]]></title>
    <link href="http://randeeshen.github.com/blog/2012/08/22/ruby-block/"/>
    <updated>2012-08-22T10:20:00+08:00</updated>
    <id>http://randeeshen.github.com/blog/2012/08/22/ruby-block</id>
    <content type="html"><![CDATA[<h2>常用到的场合：</h2>

<ol>
<li><p>scope 当需要动态参数时:</p>

<pre><code>scope :aged_0, lambda{ where("created_at IS NULL OR created_at &lt; ?", Date.today + 30.days).joins(:owner) }  
scope :aged_1, lambda{ |d_time|where("created_at IS NULL OR created_at &lt; ?", d_time).joins(:owner) }  
</code></pre></li>
<li><p>rspec 测试:</p>

<pre><code>lambda{post :create, :user =&gt; @attr}.should_not change(User, :count)
</code></pre></li>
</ol>


<p>block本质是匿名方法，和<code>hash loop class recursion</code>一样就是一个编程的工具，没有的话程序都可以写，就是特别的场合，有特别适用的地方。 <br/>
那么，block匿名方法什么时候适用呢？方便理解也举个例子吧，有两组数据，可能要进行不同处理</p>

<pre><code>def cross_loop(array_a, array_b, process)  
  array_a.each do |element_a|  
    array_b.each do |element_b|  
      process.call(element_a, element_b)  
    end  
  end  
end  

cross_loop([1,2,3], [3,4,5], lambda{|x,y| puts x + y})  
cross_loop([1,2,3], [3,4,5], lambda{|x,y| puts x * y})  
</code></pre>

<!--more-->


<p>说不用lambda行不行，当然，最基本可以在cross_loop里面调用一个函数。只不过重用的时候不好，因为没有process的参数。
当然，也可以不用lambda又动态传入process，写个process.call然后，再写些process函数也可以。</p>

<pre><code>def cross_loop(array_a, array_b, process)  
  array_a.each do |element_a|  
    array_b.each do |element_b|  
      self.send(process, element_a, element_b)  
    end  
  end  
end  

def plus(a, b); puts a + b; end  

def multiply(a, b); puts a * b; end  

cross_loop([1,2,3], [3,4,5], 'plus')  
cross_loop([1,2,3], [3,4,5], 'multiply')  
</code></pre>

<p>只是跟block比，各有所长吧</p>

<p><a href="http://innig.net/software/ruby/closures-in-ruby">关于block和闭包的练习</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 社区首推的ruby代码编写风格]]></title>
    <link href="http://randeeshen.github.com/blog/2012/06/01/ruby-style-guide/"/>
    <updated>2012-06-01T10:02:00+08:00</updated>
    <id>http://randeeshen.github.com/blog/2012/06/01/ruby-style-guide</id>
    <content type="html"><![CDATA[<h2>格式, 文件格式</h2>

<hr />

<ul>
<li>使用 UTF-8 作为文件的编码。</li>
<li>缩进使用两个空格，别用 Tab 格式，Tab将会导致到了其他环境排版混乱。</li>
<li><p>使用 Unix 的换行格式，(Linux/OSX 用户默认就是这样的，Windows 用户这里要多加注意)，如果你在 Windows 下面，并且使用 Git，可以用下面的方式做调整：</p>

<pre><code>$ git config --global core.autocrlf true 
</code></pre></li>
<li><p>在逗号，分号，冒号，运算符号的左右留下一个空格。</p>

<pre><code>sum = 1 + 2 a, b = 1, 2 1 &gt; 2 ? true : false; 
puts 'Hi' [1, 2, 3].each { |e| puts e } 
</code></pre>

<p>  唯一的例外是当你在做指数运算的时候，比如：</p>

<pre><code># 不好的
 e = M * c ** 2  

# 好的
 e = M * c**2 ``` 
</code></pre></li>
<li><p>(, [ 的后面，或 ], ) 的前面别敲空格。</p>

<pre><code>some(arg).other [1, 2, 3].length 
</code></pre></li>
<li><p>when 和 case相同缩进。我知道很多人不赞同这点，但这是 "The Ruby Programming Language" and "Programming Ruby"两本书共同沿袭的风格。</p></li>
</ul>


<!--more-->


<pre><code>  case 
  when song.name == 'Misty'
     puts 'Not again!' 
  when song.duration &gt; 120
     puts 'Too long!' 
  when Time.now.hour &gt; 21
     puts "It's too late" 
  else
     song.play 
  end

  kind = case year
          when 1850..1889 then 'Blues'
          when 1890..1909 then 'Ragtime'
          when 1910..1929 then 'New Orleans Jazz'
          when 1930..1939 then 'Swing'
          when 1940..1950 then 'Bebop'
          else 'Jazz'
          end 
</code></pre>

<ul>
<li><p>用空行来分割def以及方法中的逻辑段。</p>

<pre><code>def some_method
   data = initialize(options) 
   data.manipulate! 
   data.result 
end  

def some_method
   result 
end 
</code></pre></li>
<li><p>如果方法的参数出现在多行，则将它们对齐。</p>

<pre><code># 开始时是这样（太长了） 
def send_mail(source)
   Mailer.deliver(to: 'bob@example.com', from: 'us@example.com', subject: 'Important message', body: source.text) 
end  

# 不好的（普通缩进） 
def send_mail(source)
   Mailer.deliver(
     to: 'bob@example.com',
     from: 'us@example.com',
     subject: 'Important message',
     body: source.text) 
end  

# 不好的（双倍缩进） 
def send_mail(source)
   Mailer.deliver(
       to: 'bob@example.com',
       from: 'us@example.com',
       subject: 'Important message',
        body: source.text) 
end  

# 好的 
def send_mail(source)
   Mailer.deliver(to: 'bob@example.com',
                     from: 'us@example.com',
                     subject: 'Important message',
                     body: source.text) 
end 
</code></pre></li>
<li><p>使用RDoc以及它的约定来写API文档，并且不要在注释块与def中加入空行。</p></li>
<li><p>保持一行的长度小于80个字符。
Emacs用户可以将如下内容加入配置中 (e.g. ~/.emacs.d/init.el)：</p>

<pre><code>(setq whitespace-line-count 80
       whitespace-style '(lines))
 `    `` 
</code></pre>

<p>Vim用户可以将如下内容加入配置中 (e.g. ~/.vimrc)：</p>

<pre><code>```vim 
" VIM 7.3+ has support for highlighting a specified column. 
if exists('+colorcolumn')
     set colorcolumn=80 
else
     " Emulate     au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%80v.\+', -1) 
endif ``` 
</code></pre></li>
<li><p>避免行尾空白符。
Emacs用户可以将如下内容加入配置中(最好是接在上面的例子之后)：</p>

<pre><code>(setq whitespace-style '(trailing space-before-tab indentation space-after-tab)) 
</code></pre>

<p>Vim用户可以将以下内容添加至~/.vimrc：</p>

<pre><code>autocmd BufWritePre * :%s/\s\+$//e 
</code></pre>

<p>如果你不希望Vim破坏一些基于空格符的文件，你可以这样做：</p>

<pre><code>set listchars+=trail:░ 
</code></pre></li>
</ul>


<p></br></p>

<h2>Syntax</h2>

<ul>
<li><p>在有参数时为def加上括号，在方法不接受任何参数时省略括号。</p>

<pre><code>def some_method
   # body omitted 
end  

def some_method_with_arguments(arg1, arg2)
   # body omitted 
end 
</code></pre></li>
<li><p>不要使用for，除非你很清楚为什么需要这么做。绝大多数情况下都可以使用each来代替for。
要注意的是，for不会开启一个新的作用域（正好与each相反），在其中定义的变量在其外是可见的。</p>

<pre><code>arr = [1, 2, 3]  

# 不好的 
for elem in arr do
   puts elem end  

# 好的 
arr.each { |elem| puts elem } 
</code></pre></li>
<li><p>不要在跨行的if/unless中使用then。</p>

<pre><code># 不好的 
if some_condition then
   # body omitted 
end  

# 好的 
if some_condition
   # body omitted 
end 
</code></pre></li>
<li><p>使用条件运算符而不是if/then/else/end，它们最通用并且更简洁。</p>

<pre><code># 不好的 
result = if some_condition then something else something_else end  

# 好的 
result = some_condition ? something : something_else 
</code></pre></li>
<li><p>在条件运算符中确保每个分支只包含一个表达式。即条件运算符在使用时不要嵌套，这种时候if/else是更好的选择。</p>

<pre><code># 不好的 
some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else  

# 好的 
if some_condition
   nested_condition ? nested_something : nested_something_else 
else
   something_else 
end 
</code></pre></li>
<li><p>不要使用if x: ...，它在Ruby 1.9中被移除了，使用条件运算符代替。</p>

<pre><code># 不好的 
result = if some_condition: something else something_else end  

# 好的 
result = some_condition ? something : something_else 
</code></pre></li>
<li><p>在单行使用when时使，用when x then ...，另一个语法when x: ...在Ruby 1.9中被移除了。</p></li>
<li><p>不要使用when x: ...，原因看上一条。</p></li>
<li><p>在布尔表达式中使用&amp;&amp;/||，在流程控制时使用and/or（如果你在使用时发现需要添加额外的括号来表达逻辑，这说明你很可能用错了运算符）。</p>

<pre><code># 布尔表达式 
if some_condition &amp;&amp; some_other_condition
   do_something 
end  

# 流程控制 
document.saved? or document.save! 
</code></pre></li>
<li><p>语句跨行时不要使用?:（条件运算符），使用if/unless替代。</p></li>
<li><p>在执行体仅有一行的情况下使用作为修饰符形式的if/unless。另一个选择是使用and/or来做流程控制。</p>

<pre><code># 不好的 
if some_condition
   do_something 
end  
# 好的 
do_something if some_condition  

# 另一个好的选择 
some_condition and do_something 
</code></pre></li>
<li><p>在表示否定语义时使用unless而不是if（或者可以使用or做流程控制）。</p>

<pre><code># 不好的 
do_something if !some_condition  

# 好的 
do_something unless some_condition  

# 另一个好的选择 
some_condition or do_something 
</code></pre></li>
<li><p>不要将unless与else一起使用，将其的语义重写为肯定形式。</p>

<pre><code># 不好的 
unless success?
   puts 'failure' 
else
   puts 'success' 
end  

# 好的 
if success?
   puts 'success' 
else
   puts 'failure' 
end 
</code></pre></li>
<li><p>不要在if/unless/while之后使用括号，除非条件中包含了赋值操作（参看下方关于使用=返回结果的部分）。</p>

<pre><code># 不好的 
if (x &gt; 10)
   # body omitted 
end  

# 好的 
if x &gt; 10
   # body omitted 
end  

# 好的 
if (x = self.next_value)
   # body omitted 
end 
</code></pre></li>
<li><p>在使用DSL（如Rake，Rails，RSpec）定义的方法，以及Ruby中看起来像关键字的方法时（如attr_reader，puts，属性的访问）忽略其参数两边的括号。
其它的情况下则使用括号将参数包裹起来。</p>

<pre><code>class Person
   attr_reader :name, :age

   # omitted 
end  

temperance = Person.new('Temperance', 30) 
temperance.name  

puts temperance.age

x = Math.sin(y) 
array.delete(e) 
</code></pre></li>
<li><p>在代码块只有一行的情况下使用<code>{...}</code>而不是<code>do...end</code>。避免在代码块跨行时使用<code>{...}</code>（同样避免跨行时进行链式调用，如下方代码中最后一例）。
在流程控制及方法定义（如Rakefiles或其它DSL）时使使用<code>do...end</code>。不在链式调用时使用<code>do...end</code>。</p>

<pre><code>names = ["Bozhidar", "Steve", "Sarah"]  

# 好的 
names.each { |name| puts name }  

# 不好的 
names.each do |name|
   puts name 
end  

# 好的 
names.select { |name| name.start_with?("S") }.map { |name| name.upcase }  

# 不好的 
names.select do |name|
   name.start_with?("S") 
end.map { |name| name.upcase } 
</code></pre>

<p>  有些人可能认为在跨行进行链式调用时使用<code>{...}</code>是可行的，但是他们需要问问自己的是 - 这样的代码是否真的具有良好的可读性 and can't the blocks contents be extracted into nifty methods。</p></li>
<li><p>在不必要的情况下，避免显示的使用return进行返回。</p>

<pre><code># 不好的 
def some_method(some_arr)
   return some_arr.size 
end  

# 好的 
def some_method(some_arr)
   some_arr.size 
end 
</code></pre></li>
<li><p>在设置具有默认值的参数时，在=两边添加空格。</p>

<pre><code># 不好的 
def some_method(arg1=:default, arg2=nil, arg3=[])
   # do something... 
end  

# 好的 
def some_method(arg1 = :default, arg2 = nil, arg3 = [])
   # do something... 
end 
</code></pre>

<p>有些Ruby书籍提倡使用第一种风格，但是第二种在实际使用时往往具表现得更好（有些证据可以证明它们具有更好的可读性）。</p></li>
<li><p>在不必要的情况下，不使用行连接符（\），实际上，在任何情况下都不需要使用它们。</p>

<pre><code># 不好的 
result = 1 - \
          2  
# 好的（但其实还是很糟糕） 
result = 1 \
          - 2 
</code></pre></li>
<li><p>使用=（赋值符号）的返回作为表达式的值是可以的，但是记得在记得在两边加上括号。</p>

<pre><code># 好的 - 表明了赋值的意图 
if (v = array.grep(/foo/)) ...  

# 不好的 
if v = array.grep(/foo/) ...  

# 好的 - 不仅表明了赋值，还表明了正确的优先级 
if (v = self.next_value) == "hello" ... 
</code></pre></li>
<li><p>尽可能的使用||=来初始化变量。</p>

<pre><code># 如果name的值为nil或false，则将name的值设为Bozhidar，否则将name的值设为name本身的值（即不进行赋值）。 
name ||= 'Bozhidar' 
</code></pre></li>
<li><p>不要在初始化布尔型变量时使用||=（想想如果变量本身的值是false是会是什么情况）。</p>

<pre><code># 不好的 - 会将enabled设为true，即使enabled本身的值是false。 
enabled ||= true  

# 好的 
enabled = true if enabled.nil? 
</code></pre></li>
<li><p>避免使用Perl风格的特殊变量（如$0-9，$等）。它们看起来很神秘，不鼓励在除了单行脚本以外的地方使用它们。</p></li>
<li><p>在调用方法时，永远不要在方法名和开括号之间添加空格。</p>

<pre><code># 不好的 
f (3 + 2) + 1  

# 好的 
f(3 + 2) + 1 
</code></pre></li>
<li><p>如果方法的第一个参数以开括号打头，则在调用时总是使用括号包裹全部参数，如f((3 + 2) + 1)。</p></li>
<li><p>在使用Ruby解释器时总是为其添加-w参数，它可以提醒你以上的规则！</p></li>
<li><p>当Hash的键为Symbol时，使用Ruby 1.9的字面量语法来表示。</p>

<pre><code># 不好的 
hash = { :one =&gt; 1, :two =&gt; 2 }  

# 好的 
hash = { one: 1, two: 2 } 
</code></pre></li>
<li><p>使用最新的lambda字面量语法。</p>

<pre><code># 不好的 
lambda = lambda { |a, b| a + b } lambda.call(1, 2)  

# 好的 
lambda = -&gt;(a, b) { a + b } lambda.(1, 2) 
</code></pre></li>
<li><p>使用_来表示无用的代码块参数。</p>

<pre><code># 不好的 
result = hash.map { |k, v| v + 1 }  

# 好的 
result = hash.map { |_, v| v + 1 } 
</code></pre></li>
</ul>


<p></br></p>

<h2>命名</h2>

<p><strong>The only real difficulties in programming are cache invalidation and naming things. -- Phil Karlton</strong></p>

<ul>
<li>方法及变量名使用诸如<code>snake_case</code>的形式。</li>
<li>类及模块名使用诸如CamelCase的形式（保持HTTP，RFC，XML等采用首字母缩写表示的单词为全部大写的形式）。</li>
<li>其它常量名使用诸如<code>SCREAMING_SNAKE_CASE</code>的形式。</li>
<li>在表示断言的方法名（返回真或者假）的末尾添加一个问号（如Array#empty?）。</li>
<li>可能会造成潜在“危险”的方法名（如修改self或者在原处修改变量的方法，exit!等）应该在末尾添加一个感叹号。</li>
<li>在较短的代码块中使用reduce时，为其参数起名为<code>|a, e|（）</code>When using reduce with short blocks, name the arguments |a, e| (accumulator, element)。</li>
<li><p>在定义二元操作符方法时，将其的参数取名为other。</p>

<pre><code>def +(other)
   # body omitted 
end 
</code></pre></li>
<li><p>map优先于collect，find优先于detect，select优先于find_all，reduce优先于inject，size优先于length。以上的规则并不绝定，如果使用后者能提高代码的可读性，那么尽管使用它们。押韵的方法名（如collect，detect，inject）继承于SmallTalk语言，它们在其它语言中并不是很通用。鼓励使用select而不是find_all是因为select与reject一同使用时很不错，并且它的名字具有很好的自解释性。</p></li>
</ul>


<p></br></p>

<h2>注释</h2>

<p>Good code is its own best documentation. As you're about to add a comment, ask yourself, "How can I improve the code so that this comment isn't needed?" Improve the code and then document it to make it even clearer.  -- Steve McConnell</p>

<ul>
<li><p>写出可以“自解释”的代码，然后忽略后面的内容，这不是在开玩笑！</p></li>
<li><p>Comments longer than a word are capitalized and use punctuation. Use one space after periods.</p></li>
<li><p>避免无意义的注释。</p>

<pre><code># 不好的 
counter += 1 # increments counter by one 
</code></pre></li>
<li><p>时常更新现有的注释。没有注释优于过时的注释。</p></li>
<li><p>不要为糟糕的代码写注释。重构它们，使它们能够“自解释”。(Do or do not - there is no try.)</p></li>
</ul>


<p></br></p>

<h2>注解</h2>

<ul>
<li>代码的注解应该总是写在被注释代码的上面, 并且紧贴被注释代码.</li>
<li>注解的标题应该紧跟一个冒号以及一个空格, 用来突出显示该注释描述的内容.</li>
<li><p>如果需要多行注释, 第二行注释应该在#之后缩进两个空格.(译者注: 以上两条规则在Ruby源码中都不多看到, 前者在Lisp源码较多见, 而后者从没见过)</p>

<pre><code>def bar
   # FIXME: This has crashed occasionally since v3.2.1. It may
   #   be related to the BarBazUtil upgrade.
   baz(:quux) 
end 
</code></pre></li>
<li><p>如果代码很直白, 添加注解就显得多余, 也可以在代码所在行的尾部提供简短的注解说明.不过这应该在很少的情况下使用, 并且不被提倡.</p>

<pre><code>def bar
   sleep 100 # OPTIMIZE 
end 
</code></pre></li>
<li><p>使用TODO标题描述 漏掉的功能或打算加入的新特性</p></li>
<li><p>使用FIXME标题描述 需要被修复的有问题代码</p></li>
<li><p>使用OPTIMIZE标题描述 可能有性能瓶颈, 需要优化的代码.</p></li>
<li><p>使用HACK标题描述 感觉上需要重构的代码</p></li>
<li><p>使用REVIEW标题描述 关键性代码, 需要稍后不断的检查该代码是否工作正确.</p></li>
<li><p>只要对阅读代码有帮助, 也可以使用其他直白的注解标题, 但记得在README中注明.</p></li>
</ul>


<p></br></p>

<h2>类相关</h2>

<ul>
<li><p>当设计一个类时, 务必记住LSP原则.(译者注: LSP原则大概含义为: 如果一个函数中引用了'父类的实例', 则一定可以使用其子类的实例替代, 并且函数的基本功能不变. (虽然功能允许被扩展)</p></li>
<li><p>尽量使你的类更加健壮, 稳固.</p></li>
<li><p>为你自己的类定义to_s方法, 用来表现这个类实例对象的字符化表现形式.</p>

<pre><code>class Person
attr_reader :first_name, :last_name

def initialize(first_name, last_name)
     @first_name = first_name
     @last_name = last_name   
end    

def to_s
    "#@first_name #@last_name"   
   end
end   
</code></pre></li>
<li><p>尽量使用attr来定义属性访问器或修改器方法.</p>

<pre><code># bad 
class Person
   def initialize(first_name, last_name)
     @first_name = first_name
     @last_name = last_name
   end 

   def first_name
     @first_name
   end 

   def last_name
     @last_name
   end
end  

# good 
class Person
   attr_reader :first_name, :last_name 
   def initialize(first_name, last_name)
     @first_name = first_name
     @last_name = last_name
   end
end 
</code></pre></li>
<li><p>考虑添加工厂方法, 用以灵活的创建一个特定类的实例.</p>

<pre><code>class Person
   def self.create(options_hash)
     # body omitted
   end
end 
</code></pre></li>
<li><p>Ruby的基本价值观之一: duck-typing优先于继承.</p>

<pre><code># bad 
class Animal
   # abstract method
   def speak
   end
end  

# extend superclass 
class Duck &lt; Animal
   def speak
     puts 'Quack! Quack'
   end 
end  

# extend superclass 
class Dog &lt; Animal
   def speak
     puts 'Bau! Bau!'
   end 
end  

# good 
class Duck
   def speak
     puts 'Quack! Quack'
   end 
end  

class Dog
   def speak
     puts 'Bau! Bau!'
   end 
end 
</code></pre></li>
<li><p>应该总是避免使用类变量.</p>

<pre><code>class Parent
   @@class_var = 'parent'
   def self.print_class_var
     puts @@class_var
   end
end  

class Child &lt; Parent
   @@class_var = 'child'
end  

Parent.print_class_var # =&gt; will print "child" 
</code></pre>

<p>正如上例看到的, 所有的类实例共享类变量, 并且可以直接修改类变量,此时使用类实例变量是更好的主意.</p></li>
<li><p>总是为类的实例方法定义适当的可见性.(private, protected, private), 不应该总是使用public (默认可见性为public), 这不是Python!</p></li>
<li><p>可见性关键字应该和方法定义有相同的缩进, 并且不同的关键字之间要空行分隔.</p>

<pre><code>class SomeClass
   def public_method
     # ...
   end

   private
   def private_method
     # ...
   end 
end 
</code></pre></li>
<li><p>总是使用self来定义单例方法. 当代码重构时, 这将使得方法定义代码更加具有灵活性.</p>

<pre><code>class TestClass
   # bad
   def TestClass.some_method
     # body omitted
   end

   # good
   def self.some_other_method
     # body omitted
   end

   # Also possible and convenient when you 
   # have to define many singleton methods.
   class &lt;&lt; self
     def first_method
        # body omitted     
     end      

     def second_method_etc    
        # body omitted     
     end   
   end 
end 
</code></pre></li>
</ul>


<p></br></p>

<h2>异常处理</h2>

<ul>
<li><p>尽量不要抑制异常被正常抛出.</p>

<pre><code>begin
   # an exception occurs here 
rescue SomeError
   # the rescue clause does absolutely nothing 
end 
</code></pre></li>
<li><p>不要使用异常来代替流程控制语句.</p>

<pre><code># bad 
begin
   n / d rescue ZeroDivisionError
   puts "Cannot divide by 0!" 
end  

# good 
if n.zero?
   puts "Cannot divide by 0!" 
else
   n / d 
end
</code></pre></li>
<li><p>应该总是</p></li>
<li><p>避免拦截最顶级的Exception异常类.</p>

<pre><code># bad  
begin
   # an exception occurs here 
rescue
   # exception handling 
end  

# still bad 
begin
   # an exception occurs here 
rescue Exception
   # exception handling 
end 
</code></pre></li>
<li><p>将更具体(或特殊的)的异常处理代码放在通用的异常处理代码之前.
否则, 这些异常处理代码永远不会被处理.</p>

<pre><code># bad 
begin
   # some code 
rescue Exception =&gt; e
   # some handling 
rescue StandardError =&gt; e
   # some handling 
end  

# good 
begin
   # some code 
rescue StandardError =&gt; e
   # some handling 
rescue Exception =&gt; e
   # some handling 
end 
</code></pre></li>
<li><p>使用ensure语句, 来确保总是执行一些特地的操作.</p>

<pre><code>f = File.open("testfile") 
begin
   # .. process 
rescue
   # .. handle error 
ensure
   f.close unless f.nil? 
end 
</code></pre></li>
<li><p>除非必要, 尽可能使用Ruby现有的异常类. (而不是总派生自己的异常类)</p></li>
</ul>


<p></br></p>

<h2>集合</h2>

<ul>
<li><p>总是使用%w的方式来定义字符串数组.(译者注: w表示英文单词word, 而且定义之间千万不能有逗号)</p>

<pre><code># bad 
STATES = ['draft', 'open', 'closed']  

# good 
STATES = %w(draft open closed) 
</code></pre></li>
<li><p>避免直接引用靠后的数组元素, 这样隐式的之前的元素都被赋值为nil.</p>

<pre><code>arr = [] 
arr[100] = 1 # now you have an array with lots of nils 
</code></pre></li>
<li><p>如果要确保元素唯一, 则使用Set代替Array.Set更适合于无顺序的, 并且元素唯一的集合, 集合具有类似于数组一致性操作以及哈希的快速查找.</p></li>
<li><p>尽可能使用hash代替字符串作为哈希键.</p>

<pre><code># bad 
hash = { 'one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3 }  

# good 
hash = { one: 1, two: 2, three: 3 } 
</code></pre></li>
<li><p>避免使用易变对象作为哈希键.</p></li>
<li><p>应该尽可能的使用Ruby1.9的新哈希语法.</p>

<pre><code># bad 
hash = { :one =&gt; 1, :two =&gt; 2, :three =&gt; 3 }  

# good 
hash = { one: 1, two: 2, three: 3 } 
</code></pre></li>
<li><p>记住, 在Ruby1.9中, 哈希的表现不再是无序的. (译者注: Ruby1.9将会记住元素插入的序列)</p></li>
<li><p>当遍历一个集合的同时, 不要修改这个集合.</p></li>
</ul>


<p></br></p>

<h2>字符串</h2>

<ul>
<li><p>优先使用字符串插值来代替字符串串联.</p>

<pre><code># bad 
email_with_name = user.name + ' &lt;' + user.email + '&gt;'  

# good 
email_with_name = "#{user.name} &lt;#{user.email}&gt;" 
</code></pre></li>
<li><p>当不需要使用字符串插值或某些特殊字符时, 应该优先使用单引号.</p>

<pre><code># bad 
name = "Bozhidar"  

# good 
name = 'Bozhidar' 
</code></pre></li>
<li><p>当使用字符串插值替换实例变量时, 应该省略{}.</p>

<pre><code>class Person
   attr_reader :first_name, :last_name
   def initialize(first_name, last_name)
     @first_name = first_name
     @last_name = last_name
   end

   # bad
   def to_s
     "#{@first_name} #{@last_name}"
   end

   # good
   def to_s
     "#@first_name #@last_name"
   end
end 
</code></pre></li>
<li><p>操作较大的字符串时, 避免使用+, 如果需要修改被操作字符串, 应该总是使用&lt;&lt;作为代替.</p>

<pre><code># good and also fast 
html = '' html &lt;&lt; '&lt;h1&gt;Page title&lt;/h1&gt;'  
paragraphs.each do |paragraph|
   html &lt;&lt; "&lt;p&gt;#{paragraph}&lt;/p&gt;" 
end 
</code></pre></li>
</ul>


<p></br></p>

<h2>正则表达式</h2>

<ul>
<li><p>如果只是需要查找普通字符串, 不要使用RE. 例如: string['text'] (译者注: 示例什么意思?)</p></li>
<li><p>针对简单的结构, 你可以直接使用string[/RE/]的方式来查询. (译者注: string[]难道是新添加的语法?)</p>

<pre><code>match = string[/regexp/]             # get content of matched regexp 
first_group = string[/text(grp)/, 1] # get content of captured group 
string[/text (grp)/, 1] = 'replace'  # string =&gt; 'text replace' 
</code></pre></li>
<li><p>当无需引用分组内容时, 应该使用(?:RE)代替(RE). (会提高性能)</p>

<pre><code>/(first|second)/   # bad 
/(?:first|second)/ # good 
</code></pre></li>
<li><p>避免使用$1-$9风格的分组引用, 而应该使用1.9新增的命名分组来代替.</p>

<pre><code># bad 
/(regexp)/ =~ string 
... 
process $1  

# good 
/(?&lt;meaningful_var&gt;regexp)/ =~ string
... 
process meaningful_var 
</code></pre></li>
<li><p>有关RE集合[...], 他们只有以下几个特殊关键字值得注意: ^, -, \, ], 所以, 不要在集合中, 转义.或者[, 他们是正常字符.</p></li>
<li><p>注意, ^和$, 他们匹配行首和行尾, 而不是一个字符串的结尾, 如果你想匹配整个字符串, 用\A和\E. (译者注, A和Z分别为英文的第一个和最后一个字符)</p>

<pre><code>string = "some injection\nusername" 
string[/^username$/]   # matches 
string[/\Ausername\Z/] # don't match 
</code></pre></li>
<li><p>使用x修饰符来匹配复杂的表达式, 这将使得RE更具可读性, 你可以添加一些有用的注释.
注意, 所有空格将被忽略.</p>

<pre><code>regexp = %r{
   start         # some text
   \s            # white space char
   (group)       # first group
   (?:alt1|alt2) # some alternation
   end 
}x 
</code></pre></li>
<li><p>gusb和sub也支持哈希以及代码块形式语法, 可用于复杂情形下的替换操作.</p></li>
</ul>


<p></br></p>

<h2>百分号</h2>

<ul>
<li><p>应该大量的使用%w.</p></li>
<li><p>应该使用%()的方式, 来定义需要字符串插值以及包含"符号的单行字符串.多行字符串, 尽量使用here doc格式. (译者注: 我好喜欢%()的方式, 可能是%()比%{}写起来方便的缘故)</p>

<pre><code># bad (no interpolation needed) 
%(&lt;div class="text"&gt;Some text&lt;/div&gt;) 
# should be '&lt;div class="text"&gt;Some text&lt;/div&gt;'  

# bad (no double-quotes) 
%(This is #{quality} style) 
# should be "This is #{quality} style"  

# bad (multiple lines) 
%(&lt;div&gt;\n&lt;span class="big"&gt;#{exclamation}&lt;/span&gt;\n&lt;/div&gt;) 
# should be a heredoc.  

# good (requires interpolation, has quotes, single line) 
%(&lt;tr&gt;&lt;td class="name"&gt;#{name}&lt;/td&gt;) 
</code></pre></li>
<li><p>使用%r的方式定义包含多个/符号的正则表达式.</p>

<pre><code># bad 
%r(\s+)  

# still bad 
%r(^/(.*)$) 
# should be /^\/(.*)$/  

# good 
%r(^/blog/2011/(.*)$) 
</code></pre></li>
<li><p>尽量避免%q, %Q, %x, %s, 和%W.</p></li>
<li><p>优先使用()作为%类语法格式的分隔符.(译者注, 本人很喜欢%(...), 不过Programming Ruby中, 显然更喜欢使用%{}的方式)</p></li>
</ul>


<p></br></p>

<h2>元编程</h2>

<ul>
<li>在写自己的库时, 不要进行不必要的元编程(例如修改核心库, 不需要给他们猴子补丁).</li>
</ul>


<p></br></p>

<h2>杂项</h2>

<ul>
<li><p>总是打开Ruby -w开关. 应该写没有警告提示的代码.</p></li>
<li><p>通常情况下, 尽量避免使用哈希作为方法参数. (此时应该考虑这个方法是不是功能太多?)</p></li>
<li><p>避免一个方法内容超过10行代码, 理想情况下, 大多数方法内容应该少于5行.(不算空行)</p></li>
<li><p>尽量避免方法的参数超过三个.</p></li>
<li><p>有时候, 必须用到全局方法, 应该增加这些方法到Kernel模块.</p></li>
<li><p>尽可能使用类实例变量代替全局变量. (译者注:是类实例变量, 而不是类的实例变量. 汗~~)</p>

<pre><code>#bad 
$foo_bar = 1  

#good 
class Foo
   class &lt;&lt; self
     attr_accessor :bar
   end 
end  

Foo.bar = 1 
</code></pre></li>
<li><p>尽可能的使用alias_method 代替 alias.</p></li>
<li><p>使用OptionParser来解析复杂的命令行选项, 较简单的命令行, -s参数即可处理.</p></li>
<li><p>按照功能来编写方法, 当方法名有意义时, 应该避免方法功能被唐突的改变.</p></li>
<li><p>避免不需要的元编程.</p></li>
<li><p>除非必要, 避免更改已经定义的方法的参数.</p></li>
<li><p>避免超过三级的代码块嵌套.</p></li>
<li><p>应该持续性的遵守以上指导方针.</p></li>
<li><p>尽量使用(生活中的)常识. (译者注: 这应该是编程的最高境界?)</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
