<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JS | Randee’s Octopress Blog]]></title>
  <link href="http://randeeshen.github.com/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://randeeshen.github.com/"/>
  <updated>2012-09-04T14:47:30+08:00</updated>
  <id>http://randeeshen.github.com/</id>
  <author>
    <name><![CDATA[Randee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoffeeScript 详解]]></title>
    <link href="http://randeeshen.github.com/blog/2012/08/22/CoffeeScript/"/>
    <updated>2012-08-22T10:20:00+08:00</updated>
    <id>http://randeeshen.github.com/blog/2012/08/22/CoffeeScript</id>
    <content type="html"><![CDATA[<p>CoffeeScript的资源：<a href="http://coffee-js.github.com/coffeescript.cn/">http://coffee-js.github.com/coffeescript.cn/</a></p>

<h2>序</h2>

<p>CoffeeScript是一门简洁的，构架于JavaScript之上的预处理器语言，可以静态编译成JavaScript，语法主要受ruby和python影响，目前已经为众多rails和node项目采用。<br/>
为什么要用CoffeeScript?</p>

<ul>
<li>更少，更紧凑，和更清晰的代码</li>
<li>通过规避和改变对JavaScript中不良部分的使用，只留下精华，让代码减少出错率，更容易维护</li>
<li>在很多常用模式的实现上采用了JavaScript中的最佳实践</li>
<li>CoffeeScript生成的JavaScript代码都可以完全通过JSLint的检测</li>
</ul>


<p>什么情况下不推荐使用CoffeeScript?</p>

<!-- more -->


<ul>
<li>CoffeeScript不是JavaScript的超集，也不是完全替代品，不应该在不会JavaScript的情况下使用CoffeeScript工作</li>
</ul>


<p>CoffeeScript是一种需要预编译的语言，不能在运行时(Runtime)解释，这造成了她普遍被人质疑的一点，就是如果代码中出现运行时错误时难以调试，不过从实际使用上来看，因为CoffeeScript的编译结果大部分情况下自然而合理，至少我从来没有发现从生成的JavaScript代码回溯到对应的CoffeeScript代码有什么困难之处，我们稍后会看到这种对应关系的细节</p>

<p>这种静态编译还有一个额外的好处，就是CoffeeScript和现有的环境(浏览器,Node,Rhino等)与库完全兼容</p>

<p>最简单的安装和测试CoffeeScript的方法，是使用<em>node.js</em>的<em>npm</em>安装，然后使用命令行脚本实时编译</p>

<pre><code>npm install -g coffee-script
# watch and compile
coffee -w --output lib --compile src
</code></pre>

<p>这里假设你的coffee代码在src目录下，这个daemon会自动检测文件的改变，并编译成js文件放到lib目录下</p>

<h2>语法</h2>

<p>与SASS/LESS和CSS的关系不同，CoffeeScript不是JavaScript的超集，不能在CoffeeScript程序中写JavaScript代码，比如<code>function</code>等关键字</p>

<h2>格式</h2>

<p>在js中，如果认为当前语句和随后语句是一个整体的话，就不会自己加;，比如以下javascript代码</p>

<pre><code>//javascript code
var y = x+f
(a+b).toString()

//parsed to:
var y = x+f(a+b).toString();
</code></pre>

<p>很多js中的问题由此引起(实际上现在把;放在哪里，在js社区内也是个争论的话题)</p>

<p>而CoffeeScript在编译时为每条语句加上<code>;</code>，因此在代码中不需要写<code>;</code></p>

<p>CoffeeScript中的注释采用#</p>

<pre><code># single line comment
### 
  multi line comment
###    
</code></pre>

<p>CoffeeScript中对空白敏感，这种做法来自python，任何需要<code>({})</code>的场合下，可以用缩进代替</p>

<h2>作用域</h2>

<p>在js中最糟糕的设计就是全局变量，当你忘记用var声明变量的时候，这个变量会成为全局对象上的一个属性</p>

<p>CoffeeScript避免了这点</p>

<pre><code>foo = "bar"
</code></pre>

<p>会编译成</p>

<pre><code>(function() {
  var foo;
  foo = "bar";
}).call(this);
</code></pre>

<p>任何的代码都会使用<em>Immediate Function</em>包装，这样 foo 成为了本地变量，并且，可以通过<code>call</code>指定的<code>this</code>引用全局对象</p>

<p>为了方便起见，之后的编译后代码描述不会再加上这个包装</p>

<p>实际上在CoffeeScript中，你也不需要再用<code>var</code>声明变量，编译后会自动加上<code>var</code>，并且将声明<em>hoisting</em>，即放到作用域的顶部，看一个来自官方文档的例子</p>

<pre><code>outer = 1
change = -&gt;
  inner = -1
  outer = 10
inner = change()
</code></pre>

<p><code>-&gt;</code>是函数定义的简写方式，之后我们会探讨</p>

<p>编译后的js如下：</p>

<pre><code>var change, inner, outer;

outer = 1;

change = function() {
  var inner;
  inner = -1;
  return outer = 10;
};

inner = change();
</code></pre>

<p>这是类似ruby中的自然的作用域实现方式，inner在change()内定义成了局部变量，因为在代码中之前没有定义过</p>

<h2>赋值</h2>

<p>首先是字符串可以用类ruby的语法内嵌</p>

<pre><code>target = "world"
alert "hello, #{target}"
</code></pre>

<p>其次是字面量，可以用类似<em>YAML</em>的方法定义对象字面量</p>

<pre><code>object1 = one: 1, two: 2
object2 =
  one: 1
  two: 2
  class: "numbers"
</code></pre>

<p>注意保留字<code>class</code>，现在可以直接作为对象的key了</p>

<p>数组也可以分行</p>

<pre><code>arr = [
  1
  2
]
</code></pre>

<p>也可以解构赋值(Destructuring)</p>

<pre><code>obj = {a:"foo", b:"bar"}
{a, b} = obj
arr = [1, 2]
[a, b] = arr
</code></pre>

<h2>数组</h2>

<p>数组的操作引入了来自ruby的Range概念，并且可以将字符串完全作为数组操作</p>

<pre><code>numbers = [0..9]
numbers[3..5] = [-3, -4, -5]
my = "my string"[0..1]
</code></pre>

<p>判断一个值是否在数组内，在js中可以用<code>Array.prototype.indexOf</code>，不过IE8及以下不支持，CoffeeScript提供了跨浏览器的<code>in</code>操作符解决</p>

<pre><code>arr = ["foo", "bar"]
"foo" in arr
</code></pre>

<p>具体的实现上，是一个对<code>indexOf</code>的<code>Shim</code></p>

<pre><code> var arr,
   __indexOf = [].indexOf || function(item) { 
     for (var i = 0, l = this.length; i &lt; l; i++) { 
       if (i in this &amp;&amp; this[i] === item) 
         return i; 
     } 
     return -1; 
   };

arr = ["foo", "bar"];

__indexOf.call(arr, "foo") &gt;= 0;
</code></pre>

<p><code>for..in</code>语法可以用在数组上了，背后是用js的<code>for</code>循环实现的，这比数组的迭代器方法要效率高一些</p>

<pre><code>for name, i in ["Roger", "Roderick"]
  alert "#{i} - Release #{name}"
</code></pre>

<p>也具有过滤器<code>when</code></p>

<pre><code>prisoners = ["Roger", "Roderick", "Brian"]
release prisoner for prisoner in prisoners when prisoner[0] is "R"
</code></pre>

<p>看起来很像普通英语了，也可以用<code>()</code>收集遍历的结果</p>

<pre><code>result = (item for item in array when item.name is "test")
</code></pre>

<p>遍历对象的属性可以用<code>of</code>,这是用js自己的<code>for..in</code>实现的</p>

<pre><code>names = sam: seaborn, donna: moss
alert("#{first} #{last}") for first, last of names
</code></pre>

<h2>流程控制</h2>

<p>CoffeeScript使用来自ruby的省略语法，让控制流变得很紧凑，也引进了<code>unless</code>,<code>not</code>,<code>then</code>等语法糖式的关键字</p>

<pre><code>result = if not true then "false"
result = unless true then "false"
</code></pre>

<p>CoffeeScript中非常好的一点，就是直接取消了js中的<code>==</code>判断，改成全部用<code>===</code>进行严格比较，js中的<code>==</code>会做大量诡异的类型转换，很多情况下是bug的来源</p>

<pre><code>if "1" == 1 
  alert("equal")
else
  alert("not equal")
</code></pre>

<p>在使用if来进行空值的判断时，js有时会让人困扰，因为<code>""</code>和<code>0</code>都会被转换成<code>false</code>，Coffee提供了?操作符解决这个问题，她只有在变量为<code>null</code>或<code>undefined</code>时才为<code>false</code></p>

<pre><code>""? #true
null? #false
</code></pre>

<p>也可以用常见的类似ruby中<code>||=</code>的方法，判断赋值，此外还可以用<code>and</code>,<code>or</code>,<code>is</code>关键字代替<code>&amp;&amp;</code>,<code>||</code>,<code>==</code></p>

<pre><code>hash or= {}
hash ?= {}
</code></pre>

<p>经常有当某个属性存在的时候，才会调用属性上的方法的情况，这时候也可以用?</p>

<pre><code>knight.hasSword()?.poke()
</code></pre>

<p>只有当<code>hasSword()</code>返回对象不为空时，才会调用<code>poke</code>方法，以下是编译的js代码</p>

<pre><code>var _ref;
if ((_ref = knight.hasSword()) != null) {
  _ref.poke();
}
</code></pre>

<p>另一种情况是当<code>poke</code>方法存在时才调用</p>

<pre><code>knight.hasSword().poke?()
</code></pre>

<p>对应的js代码</p>

<pre><code>var _base;
if (typeof (_base = knight.hasSword()).poke === "function") {
  _base.poke();
}
</code></pre>

<p><code>switch case</code>语句也有了一些语法糖，并且会默认加上<code>break</code></p>

<pre><code>switch day
  when "Sun" then go relax
  when "Sat" then go dancing
  else go work
</code></pre>

<h2>函数</h2>

<p>CoffeeScript对JavaScript的函数做了很大的简化，举个例子，看一个求和函数</p>

<pre><code>sum = (nums...) -&gt;
  nums.reduce (x, y) -&gt; x+y

sum 1,2,3
</code></pre>

<p>对应JavaScript</p>

<pre><code>var sum,
    __slice = [].slice;

sum = function() {
  var nums;
  nums = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];
  return nums.reduce(function(x, y) {
    return x + y;
  });
};

sum(1, 2, 3);
</code></pre>

<ul>
<li>可以使用和ruby 1.9类似的<em>lambda函数</em>写法<code>-&gt;</code>来代替<code>function</code></li>
<li>参数列表放在<code>-&gt;</code>的前边，且可省略</li>
<li>取消了函数声明，只能将函数作为值定义</li>
<li>在CoffeeScript中，任何语句都是表达式(除了<code>break</code>和<code>continue</code>)，都有返回值，因此像ruby一样，不需要显式<code>return</code></li>
<li>js的函数参数有一个很讨厌的地方，就是参数对象arguments不是一个真正的数组，要使用数组方法，必须转换成数组<code>[].slice.call(arguments,0)</code>这样，而在CoffeeScript中收束<code>(</code>加<code>...)</code>的参数是一个真正的数组</li>
</ul>


<p>CoffeeScript的函数可以有默认参数，如</p>

<pre><code>times = (a = 1, b = 2) -&gt; a * b
</code></pre>

<p>CoffeeScript的函数调用可以不用<code>()</code>语法包围参数，像ruby一样跟在函数名后面就可以，不过这也有时候会带来问题，特别是没有参数的调用</p>

<pre><code>alert
</code></pre>

<p>对应的js</p>

<pre><code>alert;
</code></pre>

<p>而不是<code>alert()</code>，这和ruby不同，需要注意</p>

<p>缩进的格式有时需要小心，比如用多个函数做参数的时候，需要这样写</p>

<pre><code>$(".toggle").toggle -&gt;
  "on"
, -&gt;
  "off"
</code></pre>

<p>对应js</p>

<pre><code>$(".toggle").toggle(function() {
  return "on";
}, function() {
  return "off";
});
</code></pre>

<h2>模式</h2>

<p>使用CoffeeScript的一个重要理由，就是她用自己的语法实现了很多很常用的js编程模式，而且，通常是在社区内广泛被承认的最佳实践，如果不熟悉JavaScript的这些模式，可能会在调试代码上遇到一些麻烦，不过，基本上来说还是比较简单易懂的，下面我们会花一些时间研究一下CoffeeScript是用什么样的方法来封装这些通用编程模式的</p>

<h2>闭包</h2>

<p>在js中，普遍会使用闭包实现各种事件的handler或封装模块，以下是CoffeeScript对这一普遍模式的实现</p>

<pre><code>closure = do -&gt;
  _private = "foo"
  -&gt; _private

console.log(closure()) #=&gt; "foo"
</code></pre>

<p><code>do</code>关键词可以产生一个<em>Immediate Function</em>,下面是对应js代码</p>

<pre><code>var closure;

closure = (function() {
  var _private;
  _private = "foo";
  return function() {
    return _private;
  };
})();
</code></pre>

<p>闭包中经常需要绑定<code>this</code>的值给闭包的私有变量，CoffeeScript使用特殊的<code>=&gt;</code>语法省去了这个麻烦</p>

<pre><code>@clickHandler = -&gt; alert "clicked"
element.addEventListener "click", (e) =&gt; @clickHandler(e)
</code></pre>

<p>使用<code>=&gt;</code>生成函数，可以看到生成代码中会加上对<code>this</code>的绑定</p>

<pre><code>var _this = this;

this.clickHandler = function() {
  return alert("clicked");
};

element.addEventListener("click", function(e) {
  return _this.clickHandler(e);
});
</code></pre>

<p>这里CoffeeScript对于<code>this</code>有简单的别名<code>@</code></p>

<h2>扩展</h2>

<p>在js中，所有的对象都是开放的，有时候会扩展原有对象的行为(比如对数组的ECMA5 shim)，这也称为Monkey patching</p>

<pre><code>String::dasherize = -&gt; @replace /_/g, "-"
::代表原型的引用，js代码如下

  String.prototype.dasherize = function() {
    return this.replace(/_/g, "-");
  };
</code></pre>

<h2>类</h2>

<p>在js中是否要模拟传统编程语言的类，是个一直以来都有争议的话题，不同的项目，不同的团队，在类的使用上会有不同的看法，不过，一旦决定要使用类，那么至少需要一套良好的实现，CoffeeScript在语言内部实现了类的模拟，我们来看一看一个完整的例子</p>

<pre><code>class Gadget
  @CITY = "beijing"

  @create: (name, price) -&gt;
    new Gadget(name, price)

  _price = 0

  constructor: (@name, price) -&gt;
    _price = price

  sell: =&gt;
    "Buy #{@name} with #{_price} in #{Gadget.CITY}"

iphone = new Gadget("iphone", 4999)
console.log iphone.name #=&gt; "iphone"
console.log iphone.sell() #=&gt; "Buy iphone with 4999 in beijing"

ipad = Gadget.create("ipad", 3999)
console.log ipad.sell() #=&gt; "Buy ipad with 3999 in beijing"
</code></pre>

<p>这个Gadget类具有通常语言中类的功能:</p>

<ul>
<li><code>constructor</code>是构造函数，必须用这个名称，类似ruby中的initialize</li>
<li><code>name</code>是实例变量,可以通过<code>iphone.name</code>获取</li>
<li>构造函数中如果给实例变量赋值，直接将<code>@name</code>写在参数中即可，等价于在函数体中的<code>@name = name</code></li>
<li><code>_price</code>是私有变量,需要赋初始值</li>
<li><code>sell</code>是实例方法</li>
<li><code>create</code>是类方法，注意这里使用了<code>@create</code>，这和ruby有些像，在定义时的<code>this</code>指的是这个类本身</li>
<li><code>CITY</code>是类变量</li>
</ul>


<p>要注意的是，对于实例方法，要用<code>=&gt;</code>来绑定<code>this</code>，这样可以作为闭包传递，比如</p>

<pre><code>iphone = new Gadget("iphone", 4999)
$("#sell").click(iphone.sell())
</code></pre>

<p>如果不用<code>=&gt;</code>，闭包被调用时就会丢失实例对象的值(iphone)</p>

<p>对于熟悉基于类的面向对象编程的人，CoffeeScript的类是一目了然的，下面来看看对应的js代码</p>

<pre><code>var Gadget,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Gadget = (function() {
  var _price;

  Gadget.name = 'Gadget';

  Gadget.CITY = "beijing";

  Gadget.create = function(name, price) {
    return new Gadget(name, price);
  };

  _price = 0;

  function Gadget(name, price) {
    this.sell = __bind(this.sell, this);
    this.name = name;
    _price = price;
  }

  Gadget.prototype.sell = function() {
    return "Buy " + this.name + " with " + _price + " in " + Gadget.CITY;
  };

  return Gadget;

})();
</code></pre>

<p>以上的代码有很多值得注意的地方</p>

<ul>
<li>整体上来说，CoffeeScript的类模拟使用的是一个<em>构造函数闭包</em>，这是最常用的模拟类的模式，好处是可以完整地封装内部变量，且可以使用new来生成实例对象</li>
<li><code>_price</code>就是被封装在闭包内部的私有变量</li>
<li><code>sell</code>这样的实例方法是原型方法，并且在初始化时使用自定义的bind函数绑定实例(用<code>=&gt;</code>定义的情况)</li>
<li><code>create</code>和<code>CITY</code>这样的类成员使用构造函数的属性实现，重复一下，在CoffeeScript类定义中的this指的是整个闭包Gadget</li>
<li><code>Gadget.name</code>是额外定义的类名属性</li>
</ul>


<h2>类的继承</h2>

<p>CoffeeScript中为方便地实现类的继承也定义了自己的语法，我们把上面的类简化，来看一下如何继承：</p>

<pre><code>class Gadget
  constructor: (@name) -&gt;
  sell: =&gt;
    "Buy #{@name}" 

class IPhone extends Gadget
  constructor: -&gt; super("iphone")
  nosell: =&gt;
    "Don't #{@sell()}"

iphone = new IPhone
iphone.nosell() #=&gt; Don't Buy iphone
</code></pre>

<ul>
<li>使用<code>extends</code>关键字可以继承父类中的所有实例属性,比如<code>sell</code></li>
<li><code>super</code>方法可以调用父类的同名方法</li>
<li>如果不覆盖<code>constructor</code>，则她被子类默认调用</li>
</ul>


<p>来看一下对应的js代码，这有一些复杂，我们把和上边类定义中重复的地方去掉，只留下继承的实现部分</p>

<pre><code>var Gadget, IPhone,
  __extends = function(child, parent) { 
    for (var key in parent) { 
      if ({}.hasOwnProperty.call(parent, key)) 
        child[key] = parent[key]; 
    } 

    function ctor() { this.constructor = child; } 

    ctor.prototype = parent.prototype; 
    child.prototype = new ctor; 
    child.__super__ = parent.prototype; 

    return child; 
  };

IPhone = (function(_super) {

  __extends(IPhone, _super);

  IPhone.name = 'IPhone';

  function IPhone() {
    this.nosell = __bind(this.nosell, this);
    IPhone.__super__.constructor.call(this, "iphone");
  }

  IPhone.prototype.nosell = function() {
    return "Don't " + (this.sell());
  };

  return IPhone;

})(Gadget);
</code></pre>

<p>这里重点有三个：</p>

<ul>
<li><code>__extends</code>函数使用了代理构造函数ctor来实现继承，这是非常普遍的js中对象继承的实践模式，进一步解释一下

<ul>
<li>使用代理构造函数的目的是为了避免子类被更改时父类受到影响</li>
<li>使用<code>ctor.prototype = parent.prototype</code>的意义是只继承定义在prototype上的公用属性</li>
</ul>
</li>
<li>父类的类成员被直接引用拷贝到子类，而不是原型继承</li>
<li><code>super</code>的实现方法是<code>parent.prototype.constructor.call(this)</code></li>
</ul>


<h2>混入(Mixin)</h2>

<p>在ruby语言中的Mixin，能够让你的类获得多个模块的方法，可以说是对多重继承一种很好的实现，虽然在CoffeeScript中并没有像ruby的include一样的内置功能，但很容易实现她</p>

<pre><code>class Module
  @extend: (obj) -&gt;
    for key, value of obj 
      @[key] = value

  @include: (obj) -&gt;
    for key, value of obj 
      @::[key] = value

classProperties =
  find: (id) -&gt;
    console.log("find #{id}")

instanceProperties =
  save: -&gt;
    console.log("save")

class User extends Module
  @extend classProperties
  @include instanceProperties

user = User.find(1)
user = new User
user.save()
</code></pre>

<ul>
<li>继承了Module的类才可以Mixin，当然，这里也可以用组合或者直接为js的构造函数做Monkey patching</li>
<li><code>classProperties</code>是类成员模块，使用<code>@extend</code>来Mixin，实现是简单的拷贝对象的属性</li>
<li><code>instanceProperties</code>是实例成员模块，使用<code>@include</code>来Mixin，实现是拷贝对象原型的属性</li>
<li>需要指出的是，这里的拷贝是引用拷贝，有可能外部会更改被Mixin的模块内部值，更好的方法是深层值拷贝(clone)，包括JQuery在内的很多类库都实现了这类扩展方法</li>
</ul>


<h2>结语</h2>

<p>CoffeeScript提供了一门比JavaScript更强大，优雅，表现力丰富的语言，但她毕竟架构于JavaScript之上，而且是静态地编译成JavaScript代码，也就是说，她不能完全避免对JavaScript中一些不良部分的滥用，比如<code>eval</code>,<code>typeof</code>,<code>instanceof</code>等，所以，在任何情况下，建议始终开启Strict
Mode</p>

<pre><code>"use strict"
</code></pre>

<p>严格模式是一个ECMA5标准提出的js子集，禁用了很多js设计中不好的方面，在未来会逐渐成为js的语言标准，详细介绍在<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode?redirectlocale=en-US&amp;redirectslug=JavaScript%2FStrict_mode#Changes_in_strict_mode">这里</a></p>
]]></content>
  </entry>
  
</feed>
