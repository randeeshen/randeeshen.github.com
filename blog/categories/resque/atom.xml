<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: resque | Randee’s Octopress Blog]]></title>
  <link href="http://randeeshen.github.com/blog/categories/resque/atom.xml" rel="self"/>
  <link href="http://randeeshen.github.com/"/>
  <updated>2012-08-25T05:42:21+08:00</updated>
  <id>http://randeeshen.github.com/</id>
  <author>
    <name><![CDATA[Randee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用 resque 做后台任务]]></title>
    <link href="http://randeeshen.github.com/blog/2012/07/11/resque/"/>
    <updated>2012-07-11T08:20:00+08:00</updated>
    <id>http://randeeshen.github.com/blog/2012/07/11/resque</id>
    <content type="html"><![CDATA[<h2>用 resque 做后台任务 (前置设定篇)</h2>

<p>resque 是一套可以用來做 background job 的 gem，凡是执行时间长的如 email 等等非即时性的工作，都可以采用非同步执行， 以加速前端服务的反应速度。  <br/>
resque 是以 redis 做为 message queue server 的方式來进行…</p>

<p>參考链接</p>

<p>RailsCast - 影片: <a href="http://railscasts.com/episodes/271-resque">Resque</a><br/>
RailsCast - 文字: <a href="http://railscasts.com/episodes/271-resque?view=asciicast">Resque</a>  <br/>
官方文件: <a href="https://github.com/defunkt/resque">Github</a></p>

<p>安装 Gem</p>

<pre><code># Gemfile
gem "resque"

bundle install
</code></pre>

<h4>安裝 redis</h4>

<pre><code>#MacOS
brew install redis

#Debian / Ubuntu
sudo apt-get install redis-server
</code></pre>

<!--more-->


<h4>启动/停止 redis server</h4>

<ul>
<li><p>MacOS</p>

<pre><code># 启动
/usr/local/bin/redis-server /usr/local/etc/redis.conf
# 停止 ps + kill :p
sudo kill -SIGHUP $(ps aux|grep 'redis-server'|grep -v 'grep'|awk '{print $2}')
</code></pre></li>
<li><p>Debian / Ubuntu</p>

<pre><code># 启动
sudo service redis-server start
# 停止
sudo service redis-server stop
</code></pre></li>
</ul>


<h4>Resque 中的 redis 设定</h4>

<p>由于 resque 必須将 job 丟上 redis (mq server) 因此必须设定连接的位址</p>

<p>手动建立兩个文件<br/>
<code>config/redis.yml</code> => redis 的连接配置文件<br/>
<code>config/initializers/resque.rb</code> => 初始化 resque</p>

<p><code>config/redis.yml</code></p>

<pre><code>development:
  :redis: "localhost:6379"
</code></pre>

<p><code>config/initializers/resque.rb</code></p>

<pre><code>config = YAML.load_file("#{Rails.root}/config/resque.yml")[Rails.env]
Resque.redis = config[:redis]
</code></pre>

<h4>RedisToGo</h4>

<p>若是使用云端的Redis服务-RedisToGo 可以直接在 yml 中贴上 instance 的 uri, 如</p>

<p><code>config/redis.yml</code></p>

<pre><code>development:
  :redis: "redis://marsz:xxxxxx@stingfish.redistogo.com:9999"
</code></pre>

<h4>redis-rb</h4>

<p>若 redis 有同时兼作 cache 或 db 用, 而且是透过 gem “redis” 進行连接的話则可以直接將变量指定</p>

<p><code>config/redis.yml</code></p>

<pre><code>development:
  :db: 0
  :host: "localhost"
  :port: 6379
</code></pre>

<p><code>config/initializers/resque.rb</code></p>

<pre><code>config = YAML.load(File.open("#{Rails.root}/config/redis.yml"))[Rails.env]
Resque.redis = Redis.new( :host =&gt; config[:host], :port =&gt; config[:port], :db =&gt; config[:db] )
</code></pre>

<p>一般小弟比较偏好最后一个方法, 因为 redis 太方便了, 只做 background job 有點可惜 XD</p>

<h4>Resque server</h4>

<p>想要有直观的介面可以看目前 message queue (redis) 上的 job 执行狀況 resque 也有提供</p>

<p><code>config/initializers/resque.rb</code></p>

<pre><code># 在任何 initial 的文件中加都可
require "resque/server"
</code></pre>

<p><code>config/routes.rb</code></p>

<pre><code>mount Resque::Server.new, :at =&gt; "/admin/resque"
</code></pre>

<p>启动 rails server, 连接 http://localhost:3000/admin/resque 就可以看到啦</p>

<h4>启动 worker</h4>

<p>丟上 message queue 的工作, 必須透过 worker 逐个要下來执行</p>

<pre><code># 启动worker…
QUEUE=* bundle exec rake resque:work
</code></pre>

<p>上述指令启动后就会挂著, 而 server 上的启动可以透过 BACKGROUND=yes 让 worker 变成后台执行, 之后会再介紹完整參数说明</p>

<p>worker 在 message queue 中有许多 issue, 例如:<br/>
1. 部署时如何自动的重启<br/>
2. server 上的 worker 挂了要怎麼自动重启<br/>
3. worker 能否 multi-thread 执行或针对特定 queue 等等</p>

<p>以上是有关 resque 的環境设定<br/>
redis => resuqe config => worker</p>

<h2>用 resque 做后台任务 (基本使用篇)</h2>

<p>上篇提到如何進行 redis, resque, worker 的设定安裝 本篇將介紹基本使用方式</p>

<p>參考連结<br/>
RailsCast - 影片: Resque RailsCast - 文字: <br/>
Resque 官方文件: Github</p>

<h4>基本使用</h4>

<p>情境: 文章內容更新后, 要重新计算其價值(p幣~XD)</p>

<p>先写好 worker 要做的事情, worker 可以是任何 class</p>

<p><code>app/workers/post_evaluate.rb</code></p>

<pre><code>class PostEvaluate

  @queue = :post_evaluate

  def self.perform(post_id, total_time_seconds)
    evaluate Post.find(post_id), total_time_seconds
  end

end
</code></pre>

<p>worker 必備兩个部分: 1. <code>@queue</code> 指定 <code>queue</code> 的名称 2. <code>class method:perform</code> 执行 job 內容, 參数可自定。接下來是如何把 job 丟上 <code>queue</code></p>

<p><code>app/models/post.rb</code></p>

<pre><code>after_save :evaluate

def evaluate
  Resque.enqueue PostEvaluate, self.id, total_secs
end
Resque.enqueue [worker class], [argument 1], [argument 2], …..
</code></pre>

<p>相当于 worker 执行了 PostEvaluate.perform(self.id, total_secs)</p>

<h4>注意事項</h4>

<p>enqueue 的參数类型儘可能简单: <code>Fixnum</code>, <code>String</code>, <code>Array</code>, <code>Hash</code> <br/>
不要將整个 model 或 <code>class instance</code> 丟到 mq 上
redis 无法儲存像 model 这样複雜的变量类型</p>

<h2>用 resque 做后台任务 ( mailer 篇)</h2>

<p>寄信的工作是最必要丟后台的。在 web 前端使用的过程中，若要等待 server 产生 email 內容、和 smtp 连接、然后再把信送出去，这样的过程肯定让使用品質大大扣分…<br/>
因此 gem “resque_mailer” 將 resque 的 enqueue 和 perform 實作到 ActionMailer::Base 中</p>

<p>即原本的 deliver 应该是要根据 app 的 mailer 设定 (smtp或sendmail等) 把信送出
<code>bundle resqie_mailer</code> 后, deliver 的结果则变成送到 mq 上 (透过Resque.enqueue)</p>

<h4>安裝</h4>

<pre><code># Gemfile
gem 'resque'
gem 'resque_mailer'
</code></pre>

<h4>设定</h4>

<p><code>config/initializers/resque_mailer.rb</code></p>

<pre><code># queue 的名称
Resque::Mailer.default_queue_name = "foo_mailer"

# 有 resque_spec
Resque::Mailer.excluded_environments = []
# 无 resque_spec
Resque::Mailer.excluded_environments = [:test, :cucumber]
</code></pre>

<h4>使用</h4>

<pre><code>class MyMailer &lt; ActionMailer::Base
  include Resque::Mailer

  def foo(user_id)
    # .....
  end
end
</code></pre>

<p>寄信 (送到 mq)</p>

<pre><code>MyMailer.foo(user_id).deliver
</code></pre>

<p>寄信 (直接寄出不送 mq)</p>

<pre><code>MyMailer.foo(user_id).deliver!
</code></pre>

<p>这里要注意!!!!! 因为 resque 会將參数內容送到 mq 上, 而 redis 无法处理 number, string, array, hash 以外的变量, 所以在定義 mailer action 时,
參数务必限制在上述这些变量类型的范围內</p>

<h4>worker 的执行</h4>

<p>一般 mailer 的 worker 建议独立一条 queue 执行, 效率会比较好 :p</p>

<pre><code>QUEUE=foo_mailer bundle exec rake resque:work
</code></pre>

<p><code>resque_mailer</code> 简单, 但仍是 background job
因此測试還是要多多写 XD</p>

<h2>用 resque 做后台任务 ( 部署篇)</h2>

<hr />

<p>透过 capistrano 部署到 server 时，除了需要启动 worker 之外，也会希望在每次部署后，也重新启动 worker
因为 worker 是透过 rake 启动的，所以当 perform 相关的程式有修改时，worker 也必須重新启动以下將介紹如何將重启 worker 整合到 capistrano 中</p>

<h4>將 worker 丟后台执行的方法</h4>

<p>resque 1.9 以上有提供參数</p>

<pre><code>BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work
</code></pre>

<p>后台的 worker 要留一下 pid file, 以方便 kill</p>

<pre><code>PIDFILE=./resque.pid BACKGROUND=yes QUEUE=foo_queue bundle exec rake environment resque:work
</code></pre>

<h4>整合 capistrano</h4>

<p>deploy 中加 restart_resque 的 task</p>

<p><code>config/deploy.rb</code></p>

<pre><code>namespace :deploy do
  # .....
  task :restart_resque, :roles =&gt; :app do
    queues = [:foo_queue, :barbar]
    queues.each do |queue|
      pid_file = "#{current_path}/tmp/pids/resque-#{queue}.pid"
      run "test -f #{pid_file} &amp;&amp; cd #{current_path} &amp;&amp; kill -s QUIT `cat #{pid_file}` || rm -f #{pid_file}"
      run "cd #{current_path} &amp;&amp; PIDFILE=#{pid_file} RAILS_ENV=#{rails_env} BACKGROUND=yes QUEUE=#{queue} bundle execerake environment resque:work"
    end
  end
  #...
end
</code></pre>

<p>上面的例子是以一条 queue 配一个 worker 的方式执行，若要通通塞一个 worker 就 <code>QUEUE=*</code> 吧 XD</p>

<p>restart app 后就 restart resque worker 吧!!</p>

<p><code>config/deploy.rb</code></p>

<pre><code>after 'deploy:restart', 'deploy:restart_resque'
</code></pre>

<h4>有关启动 worker 的參数</h4>

<p>resque 提供了许多參数，让你可以依照不同的需求执行worker，底下將介紹</p>

<ul>
<li><p>將 worker 执行的结果輸出</p>

<p>debug 很好用，但个人還是推荐用 rspec 去 debug 吧 XD</p>

<pre><code>VVERBOSE=1 QUEUE=* bundle exec rake environment resque:work
</code></pre>

<p>指定 queue (一条或多条)</p>

<p>多条可以逗号隔开</p>

<pre><code>QUEUES=file_serve, warm_cache bundle exec rake environment resque:work
</code></pre></li>
<li><p>则是所有的 queue</p>

<pre><code>QUEUES=* bundle exec rake environment resque:work
</code></pre></li>
</ul>


<p>polling 的频率</p>

<p>针对即时性高的需求,以秒计,预设为 5 秒</p>

<pre><code>INTERVAL=0.1 QUEUE=foo bundle exec rake environment resque:work
</code></pre>

<p>多个 worker 同步执行</p>

<pre><code>COUNT=5 QUEUE=* bundle exec rake environment resque:workers
</code></pre>

<p>但官方推荐用 gem “god” 來执行多个 worker
相关可參考<a href="https://github.com/defunkt/resque/blob/master/examples/god/resque.god">官方范例</a><br/>
god 也可以用來解決 worker 挂掉的问題，有关 god 的整合, 有空再分享</p>
]]></content>
  </entry>
  
</feed>
